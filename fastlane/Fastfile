default_platform(:ios)

platform :ios do
  ENV["FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT"] = "30"

  def get_app_store_connect_api_key
    app_store_connect_api_key(
      key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
      issuer_id: ENV["APP_STORE_CONNECT_API_KEY_ISSUER_ID"],
      key_content: ENV["APP_STORE_CONNECT_API_KEY_CONTENT_BASE64"],
      is_key_content_base64: true,
    )
  end

  desc "Match Development"
  lane :match_development do
    match(
      type: "development",
      api_key: get_app_store_connect_api_key,
    )
  end

  desc "Match Ad Hoc"
  lane :match_adhoc do
    match(
      type: "adhoc",
      api_key: get_app_store_connect_api_key,
    )
  end

  desc "Match App Store"
  lane :match_appstore do
    match(
      type: "appstore",
      api_key: get_app_store_connect_api_key,
    )
  end

  desc "Fetch Development"
  lane :match_fetch_development do
    match(
      type: "development",
      readonly: true,
    )
  end

  desc "Fetch Ad Hoc"
  lane :match_fetch_adhoc do
    match(
      type: "adhoc",
      readonly: true,
    )
  end

  desc "Fetch App Store"
  lane :match_fetch_appstore do
    match(
      type: "appstore",
      readonly: true,
    )
  end

  desc "Delete Development"
  lane :match_delete_development do
    match_nuke(
      type: "development",
      api_key: get_app_store_connect_api_key,
    )
  end

  desc "Delete Ad Hoc"
  lane :match_delete_adhoc do
    match_nuke(
      type: "adhoc",
      api_key: get_app_store_connect_api_key,
    )
  end

  desc "Delete App Store"
  lane :match_delete_appstore do
    match_nuke(
      type: "appstore",
      api_key: get_app_store_connect_api_key,
    )
  end

  desc "Register a new device"
  lane :register_a_new_device do
    register_device(
      name: ENV["DEVICE_NAME"],
      udid: ENV["DEVICE_UDID"],
      platform: ENV["DEVICE_PLATFORM"],
      api_key: get_app_store_connect_api_key,
    )
  end

  desc "Reset build number"
  lane :reset_build_number do
    increment_build_number({
      build_number: 1
    })
  end

  desc "Build for Development"
  lane :build_for_development do
    match_fetch_development
    gym(
      export_method: "development",
      export_options: {
        clean: true,
        provisioningProfiles: {
          "com.kantacky.Nemulert" => "match Development com.kantacky.Nemulert",
          "com.kantacky.Nemulert.NemulertWidget" => "match Development com.kantacky.Nemulert.NemulertWidget"
        }
      }
    )
  end

  desc "Build for App Store"
  lane :build_for_release do
    match_fetch_appstore
    gym(
      export_method: "app-store",
      export_options: {
        clean: true,
        provisioningProfiles: {
          "com.kantacky.Nemulert" => "match AppStore com.kantacky.Nemulert",
          "com.kantacky.Nemulert.NemulertWidget" => "match AppStore com.kantacky.Nemulert.NemulertWidget"
        }
      }
    )
  end

  desc "Distribute to TestFlight"
  lane :distribute_to_testflight do
    pilot(
      api_key: get_app_store_connect_api_key,
      ipa: "./build/Nemulert.ipa",
      skip_submission: true,
    )
  end

  desc "Build and distribute to TestFlight"
  lane :build_and_distribute_to_testflight do
    increment_build_number({
      build_number: latest_testflight_build_number + 1
    })
    build_for_release
    distribute_to_testflight
    reset_build_number
  end
end
